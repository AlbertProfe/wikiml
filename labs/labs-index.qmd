---
title: "Labs"
---


# Lab#ANN001: Building ANN recognizes numbers

- [Building a neural network FROM SCRATCH (no Tensorflow/Pytorch, just numpy & math)](https://youtu.be/w8yWXqWQYmU?feature=shared){.external target='_blank'}
- [Kaggle notebook with all the code](https://www.kaggle.com/code/wwsalmon/simple-mnist-nn-from-scratch-numpy-no-tf-keras){.external target='_blank'}
- [Blog article with more/clearer math explanation](https://www.samsonzhang.com/building){.external target='_blank'}




# Lab#GPT001: Python extractor

**AI reads books**: Page-by-Page PDF Knowledge Extractor & Summarizer

> The `read_books.py` script performs an intelligent page-by-page analysis of PDF books, methodically extracting knowledge points and generating progressive summaries at specified intervals. It processes each page individually, allowing for detailed content understanding while maintaining the contextual flow of the book.

- [Python extractor](https://github.com/echohive42/AI-reads-books-page-by-pag){.external target='_blank'}

# Lab#ANN002: Tensor for back propagation

A small auto-grad engine (inspired from `Karpathy's micrograd and PyTorch`) using `Apple's MLX and Numpy`. That's why the name: smolgrad

> It will help y'all understand the core concepts behind automatic differentiation and backpropagation. I mean, AI is literally powered by these things.

**what is autograd?**

Auto-grad, short for automatic differentiation, is a technique used in machine learning to efficiently compute gradients of complex functions. In the context of neural networks, autograd enables the computation of gradients with respect to the model's parameters, which is crucial for training the network using optimization algorithms like gradient descent.

> It works by constructing a computational graph that represents the flow of data through the network. Each node in the graph represents a mathematical operation, and the edges represent the flow of data between these operations. By tracking the operations and their dependencies, autograd can automatically compute the gradients using the chain rule of calculus.

An algorithm used in conjuction with autograd is **Backpropagation** to train `neural networks`. It is the process of propagating the gradients backward through the computational graph, from the output layer to the input layer, in order to update the model's parameters. This is the stuff which makes ML/DL models "learn".

- [autograd: repo](https://github.com/smolorg/smolgrad){.external target='_blank'}


# Lab#RAG001: Hedge fund trading team

This lab outlines the creation of a hedge fund trading team using AI agents. The process involves setting up multiple specialized agents to handle different aspects of trading:

1. A **Market Data Agent** to gather and process financial data
2. A **Quant Agent** for developing trading strategies
3. A **Risk Managemen**t Agent to assess and mitigate risks
4. A **Portfolio Management** Agent for overall fund management

<mark>These agents are then integrated into an Agent Graph, allowing them to collaborate and share information efficiently.</mark>

> The lab also covers obtaining stock price data and generating trading signals, which are crucial for making informed investment decisions.

A key component of the lab is the creation of a `Backtester`. This tool allows the team to simulate and evaluate their trading strategies using historical data, providing valuable insights into potential performance without risking real capital.

The final step involves running the `backtest` to assess the effectiveness of the developed strategies and the overall performance of the AI-driven hedge fund team. This approach combines advanced AI techniques with traditional financial analysis, potentially offering a powerful new paradigm for hedge fund management.


### Syllabus

1. Setup
1. Create Market Data Agent
1. Create Quant Agent
1. Create Risk Management Agent
1. Create Portfolio Management Agent
1. Create Agent Graph
1. Get Stock Price and Trading Signals
1. Create Backtester
1. Run the Backtest


### Citations

- [How Hedge Fund Operations Are Organized](https://electronictradinghub.com/how-hedge-fund-operations-are-organized/){.external target='_blank'}
- [I Gave an AI Hedge Fund $1000 to invest with](https://www.youtube.com/watch?v=vnzt4lwzbXU){.external target='_blank'}
- [Hedge Fund Strategies Introduction](https://www.lgtcp.com/files/2024-04/lgt_capital_partners_-_hedge_fund_strategies_introduction_-_2024_en.pdf){.external target='_blank'}
- [Hedge Fund Trading Team Gist](https://gist.github.com/virattt/0e4c7740472177a327b61449c9af721d){.external target='_blank'}
- [Hedge Fund Structure](https://www.fundlaunch.com/articles/hedge-fund-structure){.external target='_blank'}
- [Hedge Fund Performance Evaluation Using Data Envelopment Analysis](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3004520){.external target='_blank'}
- [How to Set Up a Hedge Fund](https://fundfront.com/blog/how-to-set-up-a-hedge-fund/){.external target='_blank'}
- [Four dimensions of risk management for hedge funds](https://www.researchgate.net/publication/271946569_Four_dimensions_of_risk_management_for_hedge_funds){.external target='_blank'}
- [hedge-fund-trading-team.ipynb](https://colab.research.google.com/gist/virattt/251cfea5e66b21c7b6a58b8952476117/hedge-fund-trading-team.ipynb#scrollTo=TcKHO2SE4tFQ){.external target='_blank'}


# Lab#MAL001: How to structure your ML code

ML apps, like any other piece of software, can only generate business value once they are deployed and used in a production environment.

And the thing is, deploying all-in-one messy Jupyter notebooks from your local machine to a production environment is neither easy, nor recommended from an MLOps perspective.

Often a DevOps or MLOps senior colleague needs to re-write your all-in-on messy notebook, which adds excessive friction and frustration for you and the guy helping you.

So the question is:

> Is there a better way to develop and package your ML code, so you ship faster and better?

**Yes, there is**

- [How to structure your ML code](https://www.realworldml.net/blog/how-to-structure-your-ml-code){.external target='_blank'}


# Lab#MAL002: How to structure your ML code

This is the first article in the series where we will build AI Agents from scratch without using any LLM orchestration frameworks. In this one you will learn:

- What are agents?
- How the Tool usage actually works.
- How to build a decorator wrapper that extracts relevant details from a Python function to be passed to the LLM via system prompt.
- How to think about constructing effective system prompts that can be used for Agents.
- How to build an Agent class that is able to plan and execute actions using provided Tools.

You can find the code examples for this and following projects in this [repo](https://github.com/swirl-ai/ai-angineers-handbook){.external target='_blank'}

- [Building AI Agents from scratch - Part 1: Tool use](https://www.newsletter.swirlai.com/p/building-ai-agents-from-scratch-part){.external target='_blank'}