---
title: "Wiki Machine Learning"
---


**Machine learning (ML)** is a branch of *artificial intelligence (AI)* focused on enabling computers and machines to imitate the way that humans learn, to perform tasks autonomously, and to improve their performance and accuracy through experience and exposure to more data.


{{< video https://youtu.be/wjZofJX0v4M?start=269&end=356 >}}

> Machine learning is a subfield of artificial intelligence, which is broadly defined as the capability of a machine to imitate intelligent human behavior. Artificial intelligence systems are used to perform complex tasks in a way that is similar to how humans solve problems.


# Mathematical Model of an ANN

Each neuron computes a **weighted sum** of its inputs, adds a *bias term*, and applies an activation function. The output of a neuron can be represented as:

$$
y = f\left( \sum_{i=1}^{n} w_i x_i + b \right)
$$

where ( **w_i** ) are the weights, ( **x_i** ) are the inputs, ( **b** ) is the bias, and ( **f** ) is the activation function.

![[From: Optical neural networks: progress and challenges](https://www.nature.com/articles/s41377-024-01590-3){.external target='_blank'}](https://media.springernature.com/full/springer-static/image/art%3A10.1038%2Fs41377-024-01590-3/MediaObjects/41377_2024_1590_Fig3_HTML.png?as=webp){width=80%}

*Neuron structure and artificial neural network*. **a** Structure of biological neurons. **b** Mathematical inferring process of artificial neurons in multi-layer perceptron, including the input, weights, summation, activation function, and output. **c** Multi-layer perceptron artificial neural network

# Python, Manim and Machine Learning

**Python** is a versatile programming language widely used for coding **Artificial Neural Networks (ANNs)** and **Machine Learning (ML)** algorithms.

### Fourier Series

> The **Fourier** series animation using **Manim** serves as an excellent example of how **Python** can be used to create complex visualizations and animations for mathematical concepts.


![](/images/home/FourierSeriesAnimation.mp4)

<mark>The Fourier series animation showcases Python's ability to visualize complex mathematical concepts, which is crucial in ML for understanding data distributions, model architectures, and algorithm behavior.</mark>

Similarly, when working with ANNs and ML, you would use Python to create visualizations of your model's architecture, training progress, and prediction results.


``` python
from manim import *

class FourierSeriesAnimation(Scene):
    def construct(self):
        # Create axes
        axes = Axes(
            x_range=[-2*PI, 2*PI, PI/2],
            y_range=[-2, 2, 1],
            axis_config={"color": BLUE},
        )
        
        # Create the original function (square wave)
        def square_wave(x):
            return np.sign(np.sin(x))
        
        original_func = axes.plot(square_wave, color=WHITE)
        
        # Define a list of colors for the approximations
        colors = [RED, GREEN, YELLOW, PURPLE, ORANGE]
        
        # Create Fourier series approximations
        approximations = []
        for n in range(1, 6):
            def fourier_series(x):
                return sum([(4 / ((2*k - 1) * PI)) * np.sin((2*k - 1) * x) for k in range(1, n+1)])
            
            approximations.append(axes.plot(fourier_series, color=colors[n-1]))
        
        # Add elements to the scene
        self.add(axes, original_func)
        
        # Animate the Fourier series approximations
        for approx in approximations:
            self.play(Create(approx), run_time=2)
            self.wait(1)
        
        self.wait(2)

# Render the scene
if __name__ == "__main__":
    scene = FourierSeriesAnimation()
    scene.render()

```

